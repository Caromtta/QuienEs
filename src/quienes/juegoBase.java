
package quienes;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import static java.lang.Boolean.FALSE;
import java.util.HashMap;
import personajes.atributosPersonajes;
import java.util.Random;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import quienes.QuienEs;










     

public class juegoBase extends javax.swing.JFrame {

String nombre;
int contador;
String respuesta;


String genero;    
    public juegoBase() {
        initComponents();
        setLocationRelativeTo(null); //Sirve para que salga el resultado
        int contador=0; //Servira de contador para que al final salga el puntuaje
        jBguardarPartida.setEnabled(false);
        jBresultado.setEnabled(false);
    }

    public String getRespuesta() {
        return respuesta;
    }

    public void setRespuesta(String respuesta) {
        this.respuesta = respuesta;
    }

    public void setContador(int contador) {
        this.contador = contador;
    }

    public int getContador() {
        return contador;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jBHomero = new javax.swing.JButton();
        jBMarge = new javax.swing.JButton();
        jBFlanders = new javax.swing.JButton();
        jBHibbert = new javax.swing.JButton();
        jBKrusty = new javax.swing.JButton();
        jBLocagatos = new javax.swing.JButton();
        jBMilhouse = new javax.swing.JButton();
        jBNelson = new javax.swing.JButton();
        jBApu = new javax.swing.JButton();
        jBHM = new javax.swing.JButton();
        JbColorcabello = new javax.swing.JButton();
        jBBigote = new javax.swing.JButton();
        jBLentes = new javax.swing.JButton();
        jBPiel = new javax.swing.JButton();
        jBColorcabello = new javax.swing.JButton();
        jEmpezar = new javax.swing.JButton();
        jBresultado = new javax.swing.JButton();
        jBguardarPartida = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Adivina Quien");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 390, -1, -1));

        jBHomero.setIcon(new javax.swing.ImageIcon("C:\\Users\\ae\\Documents\\NetBeansProjects\\QuienEs\\src\\quienes\\imagenes\\homero.jpg")); // NOI18N
        jBHomero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBHomeroActionPerformed(evt);
            }
        });
        getContentPane().add(jBHomero, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 100, 130));

        jBMarge.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quienes/imagenes/marge.jpg"))); // NOI18N
        jBMarge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBMargeActionPerformed(evt);
            }
        });
        getContentPane().add(jBMarge, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 100, 130));

        jBFlanders.setBackground(new java.awt.Color(255, 255, 255));
        jBFlanders.setIcon(new javax.swing.ImageIcon("C:\\Users\\ae\\Documents\\NetBeansProjects\\QuienEs\\src\\quienes\\imagenes\\flanders.jpg")); // NOI18N
        jBFlanders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFlandersActionPerformed(evt);
            }
        });
        getContentPane().add(jBFlanders, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 100, 110));

        jBHibbert.setIcon(new javax.swing.ImageIcon("C:\\Users\\ae\\Documents\\NetBeansProjects\\QuienEs\\src\\quienes\\imagenes\\doctor.jpeg")); // NOI18N
        jBHibbert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBHibbertActionPerformed(evt);
            }
        });
        getContentPane().add(jBHibbert, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 10, 140, 130));

        jBKrusty.setIcon(new javax.swing.ImageIcon("C:\\Users\\ae\\Documents\\NetBeansProjects\\QuienEs\\src\\quienes\\imagenes\\krusty.jpg")); // NOI18N
        jBKrusty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBKrustyActionPerformed(evt);
            }
        });
        getContentPane().add(jBKrusty, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 240, 140, 100));

        jBLocagatos.setIcon(new javax.swing.ImageIcon("C:\\Users\\ae\\Documents\\NetBeansProjects\\QuienEs\\src\\quienes\\imagenes\\locaGatos.jpg")); // NOI18N
        jBLocagatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLocagatosActionPerformed(evt);
            }
        });
        getContentPane().add(jBLocagatos, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 230, 110, 140));

        jBMilhouse.setIcon(new javax.swing.ImageIcon("C:\\Users\\ae\\Documents\\NetBeansProjects\\QuienEs\\src\\quienes\\imagenes\\milhouse.png")); // NOI18N
        jBMilhouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBMilhouseActionPerformed(evt);
            }
        });
        getContentPane().add(jBMilhouse, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 110, 130));

        jBNelson.setIcon(new javax.swing.ImageIcon("C:\\Users\\ae\\Documents\\NetBeansProjects\\QuienEs\\src\\quienes\\imagenes\\nelson.png")); // NOI18N
        jBNelson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNelsonActionPerformed(evt);
            }
        });
        getContentPane().add(jBNelson, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 430, 150, -1));

        jBApu.setIcon(new javax.swing.ImageIcon("C:\\Users\\ae\\Documents\\NetBeansProjects\\QuienEs\\src\\quienes\\imagenes\\apu.png")); // NOI18N
        jBApu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBApuActionPerformed(evt);
            }
        });
        getContentPane().add(jBApu, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 420, 140, -1));

        jBHM.setText("¿Hombre o Mujer?");
        jBHM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBHMActionPerformed(evt);
            }
        });
        getContentPane().add(jBHM, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 40, -1, -1));

        JbColorcabello.setText("¿Tiene cabello?");
        JbColorcabello.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbColorcabelloActionPerformed(evt);
            }
        });
        getContentPane().add(JbColorcabello, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 80, -1, 30));

        jBBigote.setText("¿Tiene bigote?");
        jBBigote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBigoteActionPerformed(evt);
            }
        });
        getContentPane().add(jBBigote, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 120, -1, -1));

        jBLentes.setText("¿Usa lentes?");
        jBLentes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLentesActionPerformed(evt);
            }
        });
        getContentPane().add(jBLentes, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 160, -1, -1));

        jBPiel.setText("¿Color de piel?");
        jBPiel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPielActionPerformed(evt);
            }
        });
        getContentPane().add(jBPiel, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 200, -1, -1));

        jBColorcabello.setText("Color de cabello");
        jBColorcabello.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBColorcabelloActionPerformed(evt);
            }
        });
        getContentPane().add(jBColorcabello, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 240, -1, -1));

        jEmpezar.setText("Empezar");
        jEmpezar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEmpezarActionPerformed(evt);
            }
        });
        getContentPane().add(jEmpezar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 340, -1, -1));

        jBresultado.setText("Ver resultados");
        jBresultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBresultadoActionPerformed(evt);
            }
        });
        getContentPane().add(jBresultado, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 440, -1, -1));

        jBguardarPartida.setText("Guardar partida");
        jBguardarPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBguardarPartidaActionPerformed(evt);
            }
        });
        getContentPane().add(jBguardarPartida, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 390, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/quienes/donut.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 790, 660));

        pack();
    }// </editor-fold>//GEN-END:initComponents

  public void activarBotonPregunta(){ //boton que sirve para activar los botones ihabilitados del inicio
      jBguardarPartida.setEnabled(true);
      jBresultado.setEnabled(true);
  }
    
    public void activarBoton(){ //Este boton reinicia todos los personajes para poder volver a empezar a jugar
                jBMarge.setEnabled(true);
                jBFlanders.setEnabled(true);
                jBHibbert.setEnabled(true);
                jBKrusty.setEnabled(true);
                jBLocagatos.setEnabled(true);
                jBMilhouse.setEnabled(true);
                jBNelson.setEnabled(true);
                jBApu.setEnabled(true);
                jBHomero.setEnabled(true);
    }
   

   
//Aqui se desactivan los botones de los personajes que no tienen Cabello
 public void desactivarBotonCabello() throws FileNotFoundException, IOException{
    String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("calvo")){
                jBMarge.setEnabled(false);
                jBFlanders.setEnabled(false);
                jBHibbert.setEnabled(false);
                jBKrusty.setEnabled(false);
                jBLocagatos.setEnabled(false);
                jBMilhouse.setEnabled(false);
                jBNelson.setEnabled(false);
                jBApu.setEnabled(false);
                
            }     
            if(contenido.contains("con cabello")){
                jBHomero.setEnabled(false);
                
            }
    }          
}   
 //Aqui se desactivan los botones de los personajes que tienen la piel de distinto color
public void desactivarBotonPiel() throws FileNotFoundException, IOException{
    String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("amarillo")){
                jBApu.setEnabled(false);
                jBHibbert.setEnabled(false);
            }     
            if(contenido.contains("oscura")){
                jBMarge.setEnabled(false);
                jBFlanders.setEnabled(false);
                jBHomero.setEnabled(false);
                jBKrusty.setEnabled(false);
                jBLocagatos.setEnabled(false);
                jBMilhouse.setEnabled(false);
                jBNelson.setEnabled(false);
                
                
            }
    } 
}   
//Aqui se desactivan los botones de los personajes que no tienen lentes
public void desactivarBotonLentes() throws FileNotFoundException, IOException{
     String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("sin lentes")){
                jBFlanders.setEnabled(false);
                jBMilhouse.setEnabled(false);
            }     
            if(contenido.contains("con lentes")){
                jBApu.setEnabled(false);
                jBHibbert.setEnabled(false);
                jBMarge.setEnabled(false);            
                jBKrusty.setEnabled(false);
                jBLocagatos.setEnabled(false);
                jBNelson.setEnabled(false);
                jBHomero.setEnabled(false);
                
            }else{
                
            }
    } 
}  

//Aqui se desactivan los botones de los personajes que no tienen o tienen bigote
public void desactivarBotonBigote() throws FileNotFoundException, IOException{
     String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("sin bigote")){
                jBFlanders.setEnabled(false);
                jBApu.setEnabled(false);
            }     
            if(contenido.contains("tiene bigote")){
                
                jBMilhouse.setEnabled(false);
                jBHibbert.setEnabled(false);
                jBMarge.setEnabled(false);            
                jBKrusty.setEnabled(false);
                jBLocagatos.setEnabled(false);
                jBNelson.setEnabled(false);
                jBHomero.setEnabled(false);
                
            }else{
                
            }
    } 
}  

//Aqui se desactivan los botones de los personajes que tienen color de cabello diferente
public void desactivarBotonColorCabello() throws FileNotFoundException, IOException{
     String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("sin color")){
                jBHibbert.setEnabled(false);
                jBApu.setEnabled(false); 
                jBMarge.setEnabled(false);                       
                jBKrusty.setEnabled(false);
                jBMilhouse.setEnabled(false); 
                jBLocagatos.setEnabled(false);
                jBNelson.setEnabled(false);
                jBFlanders.setEnabled(false);
            }     
            if(contenido.contains("negro")){
                jBMarge.setEnabled(false);                       
                jBKrusty.setEnabled(false);
                jBMilhouse.setEnabled(false); 
                jBLocagatos.setEnabled(false);
                jBNelson.setEnabled(false);
                jBFlanders.setEnabled(false);
                jBHomero.setEnabled(false);
                      
               
            }
            if(contenido.contains("azul")){
                jBHibbert.setEnabled(false);
                jBApu.setEnabled(false); 
                jBLocagatos.setEnabled(false);
                jBNelson.setEnabled(false);
                
                jBHomero.setEnabled(false);
                jBFlanders.setEnabled(false);
                
            }
            if(contenido.contains("blanco")){
                jBHibbert.setEnabled(false);
                jBApu.setEnabled(false); 
                jBNelson.setEnabled(false);
                jBFlanders.setEnabled(false);
                jBMarge.setEnabled(false);
                jBHomero.setEnabled(false);
                jBMilhouse.setEnabled(false);
                jBKrusty.setEnabled(false);
                
            }
            if(contenido.contains("castaño")){
                jBHomero.setEnabled(false);
                jBMarge.setEnabled(false);
                jBHibbert.setEnabled(false);
                jBKrusty.setEnabled(false);
                jBLocagatos.setEnabled(false);
                jBMilhouse.setEnabled(false);
                jBApu.setEnabled(false); 
            }
            
    } 
}  

//Aqui se desactivan los botones de los personajes que tienen un genero u otro
public void desactivarBotonGenero() throws FileNotFoundException, IOException{
     String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("hombre")){
                jBMarge.setEnabled(false); 
                jBLocagatos.setEnabled(false);
                 
            }     
            if(contenido.contains("mujer")){
                jBHomero.setEnabled(false);
                jBHibbert.setEnabled(false);
                jBApu.setEnabled(false);     
                jBKrusty.setEnabled(false);
                jBMilhouse.setEnabled(false);
                jBNelson.setEnabled(false);
                jBFlanders.setEnabled(false);
               
            }
    } 
}  

//Genera el mensaje de felicidades ganaste en  caso de que adivines el personaje
public void adivinarPersonajeHomero() throws FileNotFoundException, IOException{
     String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("Homero")){
               JOptionPane.showMessageDialog(null, "Felicidades es Homero");
                 
            }else{
                JOptionPane.showMessageDialog(null, "Intenta de nuevo");
            }
    } 
}  
//Genera el mensaje de felicidades ganaste en  caso de que adivines el personaje
public void adivinarPersonajeMarge() throws FileNotFoundException, IOException{
     String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("Marge")){
               JOptionPane.showMessageDialog(null, "Felicidades es Marge");
                 
            }else{
                JOptionPane.showMessageDialog(null, "Intenta de nuevo");
            }
    } 
}  
//Genera el mensaje de felicidades ganaste en  caso de que adivines el personaje
public void adivinarPersonajeHibbert() throws FileNotFoundException, IOException{
     String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("Hibbert")){
               JOptionPane.showMessageDialog(null, "Felicidades es Hibbert");
                 
            }else{
                JOptionPane.showMessageDialog(null, "Intenta de nuevo");
            }
    } 
}
//Genera el mensaje de felicidades ganaste en  caso de que adivines el personaje
public void adivinarPersonajeNed() throws FileNotFoundException, IOException{
     String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("Ned")){
               JOptionPane.showMessageDialog(null, "Felicidades es Ned");
                 
            }else{
                JOptionPane.showMessageDialog(null, "Intenta de nuevo");
            }
    } 
}
//Genera el mensaje de felicidades ganaste en  caso de que adivines el personaje
public void adivinarPersonajeKrusty() throws FileNotFoundException, IOException{
     String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("krusty")){
               JOptionPane.showMessageDialog(null, "Felicidades es krusty");
                 
            }else{
                JOptionPane.showMessageDialog(null, "Intenta de nuevo");
            }
    } 
}
//Genera el mensaje de felicidades ganaste en  caso de que adivines el personaje
public void adivinarPersonajeLocaGatos() throws FileNotFoundException, IOException{
     String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("loca de los gatos")){
               JOptionPane.showMessageDialog(null, "Felicidades es loca de los gatos");
                 
            }else{
                JOptionPane.showMessageDialog(null, "Intenta de nuevo");
            }
    } 
}
//Genera el mensaje de felicidades ganaste en  caso de que adivines el personaje
public void adivinarPersonajeMilhouse() throws FileNotFoundException, IOException{
     String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("Milhouse")){
               JOptionPane.showMessageDialog(null, "Felicidades es Milhouse");
                 
            }else{
                JOptionPane.showMessageDialog(null, "Intenta de nuevo");
            }
    } 
}
//Genera el mensaje de felicidades ganaste en  caso de que adivines el personaje
public void adivinarPersonajeNelson() throws FileNotFoundException, IOException{
     String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("Nelson")){
               JOptionPane.showMessageDialog(null, "Felicidades es Nelson");
                 
            }else{
                JOptionPane.showMessageDialog(null, "Intenta de nuevo");
            }
    } 
}
//Genera el mensaje de felicidades ganaste en  caso de que adivines el personaje
public void adivinarPersonajeApu() throws FileNotFoundException, IOException{
     String contenido;
    FileReader archivo = null;
    archivo = new FileReader("QuienEs.txt");
    BufferedReader buffer = new BufferedReader(archivo);
    while ((contenido = buffer.readLine())!=null){
            if(contenido.contains("Apu")){
               JOptionPane.showMessageDialog(null, "Felicidades es Apu");
                 
            }else{
                JOptionPane.showMessageDialog(null, "Intenta de nuevo");
            }
    } 
}
 
    private void jBFlandersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFlandersActionPerformed
    try {
        adivinarPersonajeNed(); //En caso de que selecciones el boton del personaje puedes adivinar si es el o no
        contador++; //Aumenta 1 en el contador
    } catch (IOException ex) {
        Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jBFlandersActionPerformed

    private void jBHibbertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBHibbertActionPerformed
    try {
        adivinarPersonajeHibbert();//En caso de que selecciones el boton del personaje puedes adivinar si es el o no
        contador++;//Aumenta contador +1
    } catch (IOException ex) {
        Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jBHibbertActionPerformed

    private void jBKrustyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBKrustyActionPerformed
    try {
        adivinarPersonajeKrusty(); //En caso de que selecciones el boton del personaje puedes adivinar si es el o no
        
        contador++; //Aumenta contador +1
    } catch (IOException ex) {
        Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jBKrustyActionPerformed

    private void jBLentesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLentesActionPerformed
        fichero preguntaLentes = new fichero();
        try {
        preguntaLentes.obtenerLentes();
        desactivarBotonLentes(); //Selecciona la pregunta de los lentes y desactiva los personajes correspondientes
        contador++;
        System.out.println(contador);
        
        
    } catch (IOException ex) {
        Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
    }finally{
        
    }
    }//GEN-LAST:event_jBLentesActionPerformed
String sexo1=null;
    private void jBHMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBHMActionPerformed
    fichero preguntaGenero= new fichero();
    try {//Selecciona la pregunta de genero y desactiva los personajes correspondientes
        preguntaGenero.obtenerGenero();
        desactivarBotonGenero();
        contador++;
        System.out.println(contador);
        
        
        
    } catch (IOException ex) {
        Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
    }finally{
        
    }
                                         
    }//GEN-LAST:event_jBHMActionPerformed




    
    private void jEmpezarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEmpezarActionPerformed
        
       QuienEs empezar = new QuienEs();
       
    try { //EJECUTA EL PERSONAJE ALEATORIO, ACTIVA LOS BOTONES DE GUARDAR Y VER RESULTADOS
        contador=0;
        empezar.personajeAleatorio();
        activarBoton();
        activarBotonPregunta();
        
        
    } catch (IOException ex) {
        Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
    }finally{
        
    }
       
    
      
    }//GEN-LAST:event_jEmpezarActionPerformed

    private void JbColorcabelloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbColorcabelloActionPerformed
      fichero preguntaCabello = new fichero();
        try{ //Selecciona la pregunta de los CABELLO y desactiva los personajes correspondientes
            preguntaCabello.obtenerCabello();
            desactivarBotonCabello();
            contador++;
            System.out.println(contador);
            
        }catch(IOException ex){
            Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_JbColorcabelloActionPerformed

    private void jBBigoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBigoteActionPerformed
        fichero preguntaBigote = new fichero();
        try{ //Selecciona la pregunta de BIGOTE y desactiva los personajes correspondientes
            preguntaBigote.obtenerBigote();
            desactivarBotonBigote();
            
            contador++;
            System.out.println(contador);
           
        }catch(IOException ex){
            Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBBigoteActionPerformed

    private void jBPielActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPielActionPerformed
        fichero preguntaPiel = new fichero();
        try{//Selecciona la pregunta de piel y desactiva los personajes correspondientes
            preguntaPiel.obtenerPiel();
            desactivarBotonPiel();
            contador++;
            System.out.println(contador);
            
            
        }catch(IOException ex){
            Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jBPielActionPerformed

    private void jBColorcabelloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBColorcabelloActionPerformed
         fichero preguntaColorCabello= new fichero();
    try {//Selecciona la pregunta de color de cabello y desactiva los personajes correspondientes
        preguntaColorCabello.ObtenerColorCabello();
        desactivarBotonColorCabello();
        contador++;
        System.out.println(contador);
        
        
    } catch (IOException ex) {
        Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jBColorcabelloActionPerformed

    private void jBHomeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBHomeroActionPerformed
    try {
        adivinarPersonajeHomero();
        contador++;
        System.out.println(contador);
    } catch (IOException ex) {
        Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jBHomeroActionPerformed

    private void jBMargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBMargeActionPerformed
    try {
        adivinarPersonajeMarge();
        
        contador++;
    } catch (IOException ex) {
        Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jBMargeActionPerformed

    private void jBLocagatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLocagatosActionPerformed
    try {
        adivinarPersonajeLocaGatos();
        contador++;
    } catch (IOException ex) {
        Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jBLocagatosActionPerformed

    private void jBMilhouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBMilhouseActionPerformed
    try {
        adivinarPersonajeMilhouse();
        contador++;
    } catch (IOException ex) {
        Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jBMilhouseActionPerformed

    private void jBNelsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNelsonActionPerformed
    try {
        adivinarPersonajeNelson();
        contador++;
    } catch (IOException ex) {
        Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jBNelsonActionPerformed

    private void jBApuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBApuActionPerformed
    try {
        adivinarPersonajeApu();
        contador++;
    } catch (IOException ex) {
        Logger.getLogger(juegoBase.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jBApuActionPerformed

    private void jBresultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBresultadoActionPerformed
        puntuajeJugador cambioPantalla=new puntuajeJugador();
        cambioPantalla.setVisible(true);
     
    }//GEN-LAST:event_jBresultadoActionPerformed

    private void jBguardarPartidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBguardarPartidaActionPerformed
        //Aqui se guarda el contador dependiendo de las veces que se pulsen las preguntas 
        String convertir=String.valueOf(contador);
        String respuesta = JOptionPane.showInputDialog("Escribe tu nombre");
        FileWriter escritura=null;
        PrintWriter print1= null;
         
            try {
                
                escritura = new FileWriter ("fichero.txt", true);
                escritura.write("Ayudas solicitadas del jugador:    "+ respuesta + "      --->     "+convertir + "\n");
                
                
                JOptionPane.showMessageDialog(null, respuesta + "   " + convertir);
            } catch (IOException e) {
                System.out.println("" + e.toString());
                e.printStackTrace();
               }
        finally{
            
            try{
                escritura.close();
                 
                
                }catch(IOException e2){
                    System.out.println("" + e2.toString());

                }
            }
        
        
           
    
    }//GEN-LAST:event_jBguardarPartidaActionPerformed

  
    
    
    
    public static void main(String args[]) {
        
        
        
       java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new juegoBase().setVisible(true);
            }
        });
      
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JbColorcabello;
    private javax.swing.JButton jBApu;
    private javax.swing.JButton jBBigote;
    private javax.swing.JButton jBColorcabello;
    private javax.swing.JButton jBFlanders;
    private javax.swing.JButton jBHM;
    private javax.swing.JButton jBHibbert;
    private javax.swing.JButton jBHomero;
    private javax.swing.JButton jBKrusty;
    private javax.swing.JButton jBLentes;
    private javax.swing.JButton jBLocagatos;
    private javax.swing.JButton jBMarge;
    private javax.swing.JButton jBMilhouse;
    private javax.swing.JButton jBNelson;
    private javax.swing.JButton jBPiel;
    private javax.swing.JButton jBguardarPartida;
    private javax.swing.JButton jBresultado;
    private javax.swing.JButton jEmpezar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    
}
